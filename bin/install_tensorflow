#!/usr/bin/env bash

force=false
commit="HEAD"
source_dir="src/tensorflow"
versions=(2 3)
current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

usage()
{
  cat <<EOF
USAGE: $0 [-c COMMIT] [-f] [-h] [-s DIRECTORY] [-q|-v] [-V "VERSION1,VERSION2,..."]

 -c COMMIT      Use COMMIT as the install commit instead of "$commit"
 -f             Force the update
 -h             Show this help and exit
 -s             Use DIRECTORY as the source directory instead of "$source_dir"
 -q             Be quiet
 -v             Be verbose
 -V             Install tensorflow for the following python versions. Defaults to "2,3"
EOF
  exit "$1"
}

while getopts 'c:fhqs:vV:' o; do
  case "$o" in
    c)  commit="$OPTARG";;
    f)  force=true;;
    h)  usage 0;;
    q)  set +x;;
    s)  source_dir="$OPTARG";;
    v)  set -x;;
    V)  OLDIFS=$IFS; IFS=',' versions=($OPTARG); IFS=$OLDIFS;;
    *)  usage 1 >&2;;
  esac
done
shift $((OPTIND - 1))

function install_deps()
{
	local bazel
	bazel="$(type -P 'bazel')" 

	if [[ "$OSTYPE" =~ ^darwin ]]; then
		# See https://www.bazel.io/versions/master/docs/install.html#mac-os-x
		if [[ "$bazel" ]]; then
			brew upgrade bazel
		else
			brew install bazel
		fi

    if [[ "$(brew ls | grep coreutils)" == "" ]]; then
      brew install coreutils
    else
      brew upgrade coreutils
    fi

    sudo easy_install -U six
    sudo easy_install -U numpy
    sudo easy_install wheel
  elif [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]]; then
		# See https://www.bazel.io/versions/master/docs/install.html#install-on-ubuntu
		if [[ ! -f "/etc/apt/sources.list.d/bazel.list" ]]; then
			# One time setup
			echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
			curl -fsSL https://storage.googleapis.com/bazel-apt/doc/apt-key.pub.gpg | sudo apt-key add -
		fi

    install_apt_packages \
      "bazel" "libcurl3" "swig" "zlib1g-dev" \
      "python-numpy" "python-dev" "python-wheel" \
      "python3-numpy" "python3-dev" "python3-wheel"
  fi

  # See https://www.bazel.io/versions/master/docs/install.html#bash
  # bazel build //scripts:bazel-complete.bash
}

function has_tensorflow()
{
  installed_version="$(
    "python$1" -c 'import tensorflow as tf; print(tf.__git_version__)' 2> /dev/null |
    cut -s -d'-' -f 3
  )"

  [[ "$installed_version" == "g$2" ]]
}

function install_tensorflow()
{
  # Requirements for tensorflow
  install_deps

  local needs_update tmpdir

  needs_update=$force
  if [[ ! -d "$source_dir" ]]; then
    echo "Cloning tensorflow repository"
    mkdir -p "$source_dir"
    git clone "https://github.com/tensorflow/tensorflow" "$source_dir"
    needs_update=true
  else
    echo "Updating tensorflow repository"
    pushd "$source_dir"
    prev_head="$(git rev-parse origin/master)"
    git fetch --all && git reset --hard origin/master
    if [[ ! $needs_update ]] && [[ "$(git rev-parse origin/master)" != "$prev_head" ]]; then
      echo "Changes detected"
      needs_update=true
    fi
    popd
  fi

  pushd "$source_dir"

  # Make sure we know the actual commit hash in case it is symbolic like "HEAD"
  commit="$(git rev-parse --short "$commit")"
  git checkout "$commit"
  popd

  for version in ${versions[*]}; do
    if has_tensorflow "$version" "$commit" && ! "$needs_update"; then
      return
    fi

    build_tensorflow "$version"
  done
}

function build_tensorflow()
{
  local pythonpath tmpdir wheels wheel
  pushd "$source_dir"

  gccbin="$(which gcc)"
  pythonbin="$(which "python$1")"

  pythonpath="$($pythonbin -c \
    "from __future__ import print_function;\
    from distutils import sysconfig;\
    print(sysconfig.get_python_lib());")"

  "$current_dir/configure_tensorflow" "$gccbin" "$pythonbin" "$pythonpath"

  if [[ $? -ne 0 ]]; then
    popd

    echo "Error configuring tensorflow for python$1."
    echo "Unexpected configure option in ./configure script."
    echo "Try running tensorflow ./configure manually then update this script accordingly."
    exit 1
  fi

  tmpdir="$(mktemp -d)"
  bazel \
    --bazelrc=/dev/null \
    build -c opt \
    --config=cuda \
    --color=auto \
    --curses=auto \
    --output_filter='^ERROR:' \
    --worker_quit_after_build \
    --verbose_failures \
    //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package "$tmpdir"

  wheels=($(find "$tmpdir" -type f -iname '*.whl'))
  if [[ ${#wheels[*]} -eq 1 ]]; then
    wheel="${wheels[0]}"
  else
    for w in ${wheels[*]}; do
      echo "  $w"
    done
    echo "Please input desired wheel to use. Default is [${wheels[0]}]"
    read w || true
    if [[ "$w" == "" ]]; then
      wheel="${wheels[0]}"
    else
      if [[ -f "$w" ]]; then
        wheel="$w"
      else
        echo -e "\n\nERROR: The path you entered does not exist."
        popd
        return
      fi
    fi
  fi
  popd

  sudo -H "pip$1" --no-cache-dir install --upgrade "$(realpath "$wheel")"
  bazel clean
  rm -rf "$tmpdir"
}

install_tensorflow
