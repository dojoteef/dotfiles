#!/usr/bin/env bash
# 
# FIXME: Better error checking.  As many commands are piped, their return code
#        is not properly checked.
#
# Based on https://gist.github.com/b4n/b4465983d81a75c99f16

export LANG=C

set -e

### argument parsing

sort=true
tagfile=tags
ctags=ctags

usage()
{
  cat <<EOF
USAGE: $0 [-h] [-c CTAGS] [-f INPUTFILE] [-o TAGFILE] [-s|-S] [-v|-q] [FILE ...]

 -c CTAGS       Use CTAGS as the CTags executable instead of "$ctags"
 -f INPUTFILE   Read INPUTFILE for list of files to update
 -h             Show this help and exit
 -o TAGFILE     Update TAGFILE instead of "$tagfile"
 -q             Be quiet
 -s             Sort output
 -S             Do not sort output
 -v             Be verbose
EOF
  exit "$1"
}

while getopts 'c:f:ho:sSvq' o; do
  case "$o" in
    c)  ctags="$OPTARG";;
    f)  inputfile="$OPTARG";;
    h)  usage 0;;
    o)  tagfile="$OPTARG";;
    q)  set +x;;
    s)  sort=true;;
    S)  sort=false;;
    v)  set -x;;
    *)  usage 1 >&2;;
  esac
done
shift $((OPTIND - 1))

inputfiles=("$@")
[ "$inputfile" ] && inputfiles=("${inputfiles[@]}" "$(cat "$inputfile")")
[ ${#inputfiles[@]} -gt 0 ] || usage 1 >&2

function pattern_string { local d=$1; shift; printf "%s " "${@/#/$d}"; }
removes=$(pattern_string "-e " "${inputfiles[@]}")
updates=($(for f in "${inputfiles[@]}"; do [[ -f $f ]] && echo "$f"; done))

tmp=$(mktemp "update-$(basename "$tagfile").XXXXXXXX")
(
  # remove the existing tags for the files
  grep -vF "$removes" "$tagfile"

  # then add updated files at the end
  "$ctags" -o- "${updates[@]}"
) | (
if "$sort"; then
  # extract the pseudo-tags
  sed -n '/^!_TAG_/!q;p' "$tagfile"
  # and sort the rest
  sed '/^!_TAG_/d' | sort -u
else
  cat
fi
) > "$tmp"

mv -f "$tmp" "$tagfile"
