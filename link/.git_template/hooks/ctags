#!/usr/bin/env bash

#################
# Script setup
#################

# error handling
trap 'errexit' ERR
set +o errexit
set -o errtrace

# exit handling
function on_exit()
{
  rm -f "$tmpfile"
}

trap 'on_exit>&2' EXIT INT TERM

# error logging
exec 2> >(logger -t "githook.ctagsupdate[$$]") || true


#######################
# Variable declarations
#######################

# ensure cache directory exists
cachedir="$DOTFILES/caches/ctags"
mkdir -p "$cachedir"

# use same naming scheme as gutentags
gitdirname="$(git rev-parse --show-toplevel | tr '/\: ' '---_' | sed -e's/^-*//')"
tagfile="$cachedir/$gitdirname""-tags"

# empty tree obj
empty_tree="$(git hash-object -t tree /dev/null)"

# current revision
rev="$(git rev-parse HEAD 2> /dev/null)"

# there is no hash for HEAD so must be an empty tree
if [[ "$rev" == "HEAD" ]]; then
  rev="$empty_tree"
fi

if [[ -r "$tagfile.last" ]]; then
  read last < "$tagfile.last"
else
  last="$empty_tree"
fi
tmpfile=$(mktemp "git-update-tags.XXXXXXXX")

#######################
# Function declarations
#######################

function gather_files()
{
  local files=()

  while read -r dstatus filename; do
    case $dstatus in
      A|M|T|X|D|R*) 
        files+=($filename)
        ;;
      *) 
        ;;
    esac
  done < <(git diff --name-status "$1")

  echo "${files[*]}"
}

function handle_diff()
{
  local files=()

  # First gather files between last and HEAD revision
  files+=($(gather_files "$last..$rev"))

  # Then add staged files
  files+=($(gather_files "--cached"))

  if [[ ${#files[@]} -gt 0 ]]; then
    ctags_update -o "$tmpfile" "${files[*]}"
  fi
}

function initial_tags()
{
  git ls-files | ctags -L - -o "$tmpfile" && mv "$tmpfile" "$tagfile"
  echo $rev > "$tagfile.last"
  exit 0
}

#######################
# Main
#######################

[ -f "$tagfile" ] && cp "$tagfile" "$tmpfile" || initial_tags
handle_diff && mv -v "$tmpfile" "$tagfile"
echo $rev > "$tagfile.last"
