# Basics
# ──────

# Set the colorscheme
colorscheme zenburn

# Width of a tab
set-option global tabstop 4

# Indent with 4 spaces
set-option global indentwidth 4

# Replicate expandtab from vim.
declare-option -docstring "Expand <tab> to spaces based on tabstop. To insert a literal <tab> disable hooks for insert mode." bool expandtab true

# expandtab converts tabs to spaces when inserting
hook global InsertChar '\t' %{
    try %sh{ [ $kak_opt_expandtab = "true" ] && printf "%s\n" 'execute-keys -draft h<ret>@' }
}

# Replicate a light version of softtabstop from vim (use a boolean that respects tabstop).
declare-option -docstring "Make tabstop number of spaces feel like a <tab> when presssing <backspace>" bool softtabstop true

# delete spaces back to the last softtabstop
map global insert <backspace> '<a-;>:softtabstop-insert-backspace<ret>'
def softtabstop-insert-backspace -hidden %{
    try %sh{
        if [ $kak_opt_softtabstop = "true" ]; then
            printf "%s\n" 'execute-keys -draft "<a-?>\h+<ret><a-;>H<a-k>\h\z<ret><a-@>s <ret>d"'
        else
            printf "%s\n" 'exec <backspace>'
        fi
    } catch %{
        exec <backspace>
    }
}

# use silver searcher
set-option global grepcmd 'ag --column'

# define xml tag object
map global object -docstring 'xml tag object' t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}


# Useful key mappings
# ───────────────────
map global normal '#' :comment-line<ret>
map global user -docstring 'lsp mode' l ':enter-user-mode lsp<ret>'


# Use <tab>/<s-tab> for insert mode completion selection
# ──────────────────────────────────────────────────────
hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

# Surround blocks of text with various types of punctuation
# ─────────────────────────────────────────────────────────
declare-user-mode surround
map global user -docstring 'surround mode' s ':enter-user-mode surround<ret>'
map global surround ( 'a)<esc>i(<esc>H<a-;>' -docstring '(surround)'
map global surround { 'a}<esc>i{<esc>H<a-;>' -docstring '{surround}'
map global surround < 'a<gt><esc>i<lt><esc>H<a-;>' -docstring '<surround>'
map global surround [ 'a]<esc>i[<esc>H<a-;>' -docstring '[surround]'
map global surround ) 'a )<esc>i( <esc>2H<a-;>' -docstring '( surround )'
map global surround } 'a }<esc>i{ <esc>2H<a-;>' -docstring '{ surround }'
map global surround > 'a <gt><esc>i<lt> <esc>2H<a-;>' -docstring '< surround >'
map global surround ] 'a ]<esc>i[ <esc>2H<a-;>' -docstring '[ surround ]'
map global surround '`' 'a`<esc>i`<esc>H<a-;>' -docstring '`surround`'
map global surround '"' 'a"<esc>i"<esc>H<a-;>' -docstring '"surround"'
map global surround "'" "a'<esc>i'<esc>H<a-;>" -docstring "'surround'"
map global surround d "Z<a-S><a-d>z<a-:>H" -docstring 'delete'
map global surround c ":enter-user-mode surround<ret>d:enter-user-mode surround<ret>" -docstring 'change'


# Phantom selections (toggle through selections)
# ─────────────────────────────────────────────────────────
set-face global PhantomSelection SecondarySelection

declare-option -hidden str-list phantom_selections
declare-option -hidden range-specs phantom_selections_ranges

add-highlighter global/ ranges phantom_selections_ranges

define-command -hidden phantom-selection-store-and-highlight %{
    set-option window phantom_selections %reg{^}
    set-option window phantom_selections_ranges %val{timestamp}
    evaluate-commands -no-hooks -draft -itersel %{
        set-option -add window phantom_selections_ranges "%val{selection_desc}|PhantomSelection"
    }
}

define-command -hidden phantom-selection-iterate-impl -params 1 %{
    evaluate-commands -save-regs ^ %{
        set-register ^ %opt{phantom_selections}

        try %{ execute-keys <a-z>a }
        execute-keys %arg{1}
        # keep the main selection and put all the other in the mark
        try %{
            evaluate-commands -draft %{
                execute-keys -save-regs '' '<a-space>Z'
                phantom-selection-store-and-highlight
            }
            execute-keys <space>
        }
    }
}

define-command phantom-selection-iterate-next -docstring "Turn secondary selections into phantoms and select the next phantom" %{
    phantom-selection-iterate-impl ')'
}

define-command phantom-selection-iterate-prev -docstring "Turn secondary selections into phantoms and select the previous phantom" %{
    phantom-selection-iterate-impl '('
}

define-command phantom-selection-clear -docstring "Remove all phantom selections" %{
    unset-option window phantom_selections
    unset-option window phantom_selections_ranges
}

define-command phantom-selection-select-all -docstring "Select all phantom selections" %{
    evaluate-commands -save-regs ^ %{
        set-register ^ %opt{phantom_selections}
        try %{
            execute-keys <a-z>a
            echo ""
        }
    }
}

define-command phantom-selection-add-selection -docstring "Create phantoms out of the current selections" %{
    evaluate-commands -draft -save-regs ^ %{
        set-register ^ %opt{phantom_selections}
        try %{ execute-keys "<a-z>a" }
        execute-keys -save-regs '' "Z"
        phantom-selection-store-and-highlight
    }
}

define-command -hidden -override -docstring "Creates a phantom group of selections" \
    phantom-group %{
        phantom-selection-add-selection
        set-option buffer modelinefmt "{PrimarySelection}phantom{StatusModeInfo} %opt{modelinefmt}"
        map buffer normal <tab>       ':phantom-selection-iterate-next<ret>'
        map buffer insert <tab>       '<esc>:phantom-selection-iterate-next<ret>i'
        map buffer normal <s-tab>     ':phantom-selection-iterate-prev<ret>'
        map buffer insert <s-tab>     '<esc>:phantom-selection-iterate-prev<ret>i'
        map buffer normal <c-g>       ':phantom-ungroup<ret>'
        map buffer insert <c-g>       '<esc>:phantom-ungroup<ret>i'
        map buffer normal <a-space>   ':phantom-ungroup<ret><a-space>:phantom-group<ret><space>'
        map buffer insert <a-space>   '<esc>:phantom-ungroup<ret><a-space>:phantom-group<ret><space>i'
    }
define-command -hidden -override -docstring "Removes a phantom group of selections" \
    phantom-ungroup %{
        phantom-selection-select-all
        phantom-selection-clear
        unmap buffer normal <tab>      ':phantom-selection-iterate-next<ret>'
        map   buffer insert <tab>      '<tab>'
        unmap buffer normal <s-tab>    ':phantom-selection-iterate-prev<ret>'
        unmap buffer insert <s-tab>    '<esc>:phantom-selection-iterate-prev<ret>i'
        unmap buffer normal <c-g>      ':phantom-ungroup<ret>'
        unmap buffer insert <c-g>      '<esc>:phantom-ungroup<ret>i'
        unmap buffer normal <a-space>  ':phantom-ungroup<ret><a-space>:phantom-group<ret><space>'
        unmap buffer insert <a-space>  '<esc>:phantom-ungroup<ret><a-space>:phantom-group<ret><space>i'
        evaluate-commands %sh{printf "set-option buffer modelinefmt '%s'\n" "$(printf "%s" "${kak_opt_modelinefmt}" | sed "s/{PrimarySelection}phantom{StatusModeInfo} //")"}
    }

map global normal <c-g>  ':phantom-group<ret><space>'
map global insert <c-g>  '<a-;>:phantom-group<ret><a-;><space>'


# Highlighters
# ────────────

# Display line numbers (normal mode=relative line numbers; insert mode=absolute line numbers)
hook global WinCreate ^[^*]+$ %{ add-highlighter window/rellinenum number-lines -hlcursor -relative }
hook global ModeChange '.+:insert' %{ try %{ remove-highlighter window/rellinenum }; try %{ add-highlighter window/abslinenum number-lines -hlcursor } }
hook global ModeChange '.+:normal' %{ try %{ remove-highlighter window/abslinenum }; try %{ add-highlighter window/rellinenum number-lines -hlcursor -relative } }

# Highlight searches (search uses the '/' register by default)
hook global RegisterModified '/' %{ try %{ add-highlighter -override global/search regex "%reg{/}" 0:+u } }

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# Softwrap long line
add-highlighter global/ wrap -word -indent

# Highlight the current word under the cursor
set-face global CurWord default,rgba:80808040
hook global NormalIdle .* %{
    evaluate-commands -draft %{
        try %{
            exec <space><a-i>w <a-k>\A\w+\z<ret>
            add-highlighter -override global/curword regex "\b\Q%val{selection}\E\b" 0:CurWord
        } catch %{
            add-highlighter -override global/curword group
        }
    }
}

# Highlight matching open/close punctuation (and in insert mode)
add-highlighter global/ show-matching
# See https://github.com/mawww/kakoune/issues/1192#issuecomment-422138638
declare-option -hidden range-specs show_matching_range
hook global -group kakrc-matching-ranges InsertChar '[[\](){}<>]' %{
    evaluate-commands -draft %{
        try %{
            exec '<esc>;hm<a-k>..<ret>;'
            set window show_matching_range %val{timestamp} "%val{selection_desc}|MatchingChar"
        } catch %{
            set window show_matching_range 0
        }
        hook window -once InsertChar '[^[\](){}<>]' %{
            set window show_matching_range 0
        }
        hook window -once ModeChange .* %{
            set window show_matching_range 0
        }
        hook window -once InsertMove .* %{
            set window show_matching_range 0
        }
    }
}
add-highlighter global/ ranges show_matching_range


# Filetype specific settings
# ──────────────────────────
hook global WinSetOption filetype=git-commit %{
    # wrap to 70 lines
    add-highlighter buffer/ wrap -word -width 72
    set window autowrap_column 71
    # auto-wrap lines
    autowrap-enable
}


# Useful commands
# ───────────────

# Find file using silver searcher
define-command open -menu -params 1 -shell-script-candidates %{ ag -g '' --ignore "$kak_opt_ignored_files" } %{ edit %arg{1} }
alias global o open  # allow :o to find and edit a file

# Command to enable an IDE-like setup
define-command ide -params 0..1 -docstring 'ide [session-name]: Turn current session into an IDE' %{
    # Try naming the session
    try %{ rename-session %arg{1} }

    # Main client
    rename-client main
    set-option global jumpclient main

    # Tools client
    new rename-client tools
    set-option global toolsclient tools

    # Docs client
    new rename-client docs
    set-option global docsclient docs

    # If running in tmux then arrange the windows nicely
    evaluate-commands %sh{
        if [ -n "$TMUX" ]; then
            tmux set-window-option other-pane-height 15
            tmux select-layout main-horizontal
        fi
    }

    # Make sure the main client is focused
    focus main
}

# Support running arbitrary commands asynchronously in a fifo buffer
define-command -params .. fifo %{
    evaluate-commands %sh{
        output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-fifo.XXXXXXXX)/fifo
        mkfifo "${output}"
        scroll=""
        [ "$1" = "-scroll" ] && scroll="$1" && shift
        ( eval "$@" > "${output}" 2>&1 & ) > /dev/null 2>&1 < /dev/null

        printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
            edit! -fifo ${output} ${scroll} *fifo*
            hook -always -once buffer BufCloseFifo .* %{
                nop %sh{
                    rm -r $(dirname "${output}")
                }
            }
        }"
    }
}


# Language server support (via kak-lsp)
# ─────────────────────────────────────

# Enable the language server
evaluate-commands %sh{
    if command -v kak-lsp > /dev/null 2>&1; then
        kak-lsp --kakoune -s "$kak_session"

        # Uncomment to output debug logs for kak-lsp
        # (kak-lsp -s $kak_session -vvv ) > /tmp/lsp_"$(date +%F-%T-%N)"_kak-lsp_log 2>&1 < /dev/null &

        # Configure language server for supported languages
        xargs -0 printf "%s\n" <<\EOF
            hook global WinSetOption filetype=(python) %{
                lsp-enable-window
                lsp-auto-hover-enable
                lsp-auto-hover-insert-mode-enable
                lsp-auto-signature-help-enable
                hook window BufWritePre .* lsp-formatting-sync
            }

            # Automatically highlight references
            set-option global lsp_auto_highlight_references true

            # Use the python-language-server with mypy by default
            set-option global lsp_server_configuration pyls.plugins.pyls_mypy.enabled=true

                # Allow overriding hover to use the docsclient
            declare-option -docstring "Where to display hover: (docsclient, anchor, default)" str lsp_hover_location "default"
            define-command -hidden lsp-docs-display -params 2 -docstring "Render text in docsclient" %{
                evaluate-commands -save-regs '"' -client %opt{docsclient} %{
                    edit! -scratch %arg{1}
                    set-register '"' %arg{2}
                    execute-keys Pgg
                }
            }

            # Automatically switch to use docsclient if specified
            hook global GlobalSetOption 'docsclient=.+' %{ set-option global lsp_hover_location "docsclient" }
            hook global GlobalSetOption 'docsclient=' %{ set-option global lsp_hover_location "default" }

            define-command -hidden -override lsp-show-hover -params 3 -docstring %{
                lsp-show-hover <anchor> <info> <diagnostics>
                Render hover info.
            } %{ evaluate-commands %sh{
                lsp_info="$2"
                lsp_diagnostics="$3"
                content=$(eval "${kak_opt_lsp_show_hover_format}")
                # remove leading whitespace characters
                content="${content#"${content%%[![:space:]]*}"}"
                # remove trailing whitespace characters
                content="${content%"${content##*[![:space:]]}"}"

                if [ "$kak_opt_lsp_hover_max_lines" -gt 0 ]; then
                    content=$(printf %s "$content" | head -n "$kak_opt_lsp_hover_max_lines")
                fi

                content=$(printf %s "$content" | sed s/\'/\'\'/g)

                case "$kak_opt_lsp_hover_location" in
                    docsclient) printf "lsp-docs-display *hover* '%s'" "$content";;
                    anchor)     printf "info -anchor %%arg{1} '%s'" "$content";;
                    *)          printf "info '%s'" "$content";;
                esac
            }}
            # The following EOF *must not* be indented: https://github.com/koalaman/shellcheck/wiki/SC1039
EOF
    else
        printf "echo -debug kak-lsp not found in PATH"
    fi
}


# Load local Kakoune config file if it exists
# ───────────────────────────────────────────

evaluate-commands %sh{ [ -f "$kak_config"/local.kak ] && echo "source $kak_config/local.kak" }
